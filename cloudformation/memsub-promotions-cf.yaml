AWSTemplateFormatVersion: '2010-09-09'
Description: Membership/Subscription promotions tool
Parameters:
  Name:
    Description: The name given to the autoscaling group
    Type: String
  Stage:
    Description: Environment name
    Type: String
    AllowedValues:
    - PROD
    - CODE
  GithubTeamName:
    Description: Github team name, used for giving SSH access to members of the team.
    Type: String
    Default: Membership-and-Subscriptions
  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  MaxInstances:
    Description: Maximum number of instances. This should be (at least) double the
      desired capacity.
    Type: Number
  MinInstances:
    Description: Minimum number of instances
    Type: Number
  VpcId:
    Description: ID of the VPC onto which to launch the application
    Type: AWS::EC2::VPC::Id
  PrivateVpcSubnets:
    Description: Public subnets to use in VPC
    Type: List<AWS::EC2::Subnet::Id>
  PublicVpcSubnets:
    Description: Public subnets to use for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  AmiId:
    Description: Custom AMI to use for instances
    Type: String
  AlarmEmailAddress:
    Description: Contact email for alarms
    Type: String
  InternalCidrIp:
    Description: Internal network CIDR IP
    Type: String
  Stack:
    Description: Application stack
    Type: String
    Default: membership
  SslArn:
    Description: SSL certificate ARN
    Type: String
    Default: ''
  DEVPromotionsTableStreamARN:
    Description: ARN of the MembershipSub-Promotions-DEV DynamoDB stream to trigger
      the lambda function which updates the MembershipSub-PromoCode-View-DEV table
    Type: String
    Default: ''
  UATPromotionsTableStreamARN:
    Description: ARN of the MembershipSub-Promotions-UAT DynamoDB stream to trigger
      the lambda function which updates the MembershipSub-PromoCode-View-UAT table
    Type: String
    Default: ''
  PRODPromotionsTableStreamARN:
    Description: ARN of the MembershipSub-Promotions-PROD DynamoDB stream to trigger
      the lambda function which updates the MembershipSub-PromoCode-View-PROD table
    Type: String
    Default: ''
  App:
    Description: Application name
    Type: String
    Default: promotions-tool
  VulnerabilityScanningSecurityGroup:
    Description: Security group that grants access to the account's Vulnerability
      Scanner
    Type: AWS::EC2::SecurityGroup::Id
Conditions:
  CreateLambdaResources: !Equals [!Ref 'Stage', PROD]
Resources:
  MembershipSubPromotionsToolRole:
    Condition: CreateLambdaResources
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: MembershipSub-Promotions-Tool-Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            - dynamodb:Scan
            Resource:
            - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-PROD
            - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-UAT
            - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-DEV
            - arn:aws:dynamodb:*:*:table/MembershipSub-Campaigns-PROD
            - arn:aws:dynamodb:*:*:table/MembershipSub-Campaigns-UAT
            - arn:aws:dynamodb:*:*:table/MembershipSub-Campaigns-DEV
          - Effect: Allow
            Action:
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            Resource:
            - arn:aws:dynamodb:*:*:table/MembershipSub-PromoCode-View-PROD
            - arn:aws:dynamodb:*:*:table/MembershipSub-PromoCode-View-UAT
            - arn:aws:dynamodb:*:*:table/MembershipSub-PromoCode-View-DEV
  MembershipSubPromotionsDataRole:
    Condition: CreateLambdaResources
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: MembershipSub-Promotions-Data-Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            - dynamodb:Scan
            Resource:
            - arn:aws:dynamodb:*:*:table/MembershipSub-PromoCode-View-PROD
            - arn:aws:dynamodb:*:*:table/MembershipSub-PromoCode-View-UAT
            - arn:aws:dynamodb:*:*:table/MembershipSub-PromoCode-View-DEV
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
            - arn:aws:s3:::ophan-raw-membership-promo-code-view/*
  PromoCodeViewLambdaFunctionDEV:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: gu-promotions-tool-dist
        S3Key: membership/PROD/MembershipSub-Promotions-PromoCode-View/MembershipSub-Promotions-PromoCode-View.zip
      Description: An Amazon DynamoDB trigger that creates a view of data associated
        with a particular promo code for the data pipeline to collect.
      FunctionName: MembershipSub-Promotions-to-PromoCode-View-DEV
      Handler: MembershipSub-Promotions-to-PromoCode-View-Lambda.handler
      MemorySize: 128
      Role: !GetAtt [MembershipSubPromotionsToolRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10
  PromoCodeViewLambdaFunctionUAT:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: gu-promotions-tool-dist
        S3Key: membership/PROD/MembershipSub-Promotions-PromoCode-View/MembershipSub-Promotions-PromoCode-View.zip
      Description: An Amazon DynamoDB trigger that creates a view of data associated
        with a particular promo code for the data pipeline to collect.
      FunctionName: MembershipSub-Promotions-to-PromoCode-View-DEV
      Handler: MembershipSub-Promotions-to-PromoCode-View-Lambda.handler
      MemorySize: 128
      Role: !GetAtt [MembershipSubPromotionsToolRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10
  PromoCodeViewLambdaFunctionPROD:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: gu-promotions-tool-dist
        S3Key: membership/PROD/MembershipSub-Promotions-PromoCode-View/MembershipSub-Promotions-PromoCode-View.zip
      Description: An Amazon DynamoDB trigger that creates a view of data associated
        with a particular promo code for the data pipeline to collect.
      FunctionName: MembershipSub-Promotions-to-PromoCode-View-PROD
      Handler: MembershipSub-Promotions-to-PromoCode-View-Lambda.handler
      MemorySize: 128
      Role: !GetAtt [MembershipSubPromotionsToolRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10

  PromoCodeViewLambdaEventSourceDEV:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !Ref 'DEVPromotionsTableStreamARN'
      FunctionName: !Ref 'PromoCodeViewLambdaFunctionDEV'
      StartingPosition: TRIM_HORIZON
  PromoCodeViewLambdaEventSourceUAT:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !Ref 'UATPromotionsTableStreamARN'
      FunctionName: !Ref 'PromoCodeViewLambdaFunctionUAT'
      StartingPosition: TRIM_HORIZON
  PromoCodeViewLambdaEventSourcePROD:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !Ref 'PRODPromotionsTableStreamARN'
      FunctionName: !Ref 'PromoCodeViewLambdaFunctionPROD'
      StartingPosition: TRIM_HORIZON

  PromoCodeViewDataLakeLambdaFunctionPROD:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: gu-promotions-tool-dist
        S3Key: membership/PROD/MembershipSub-Promotions-PromoCode-View/MembershipSub-Promotions-PromoCode-View.zip
      Description: A Lambda function to backup the PromoCode-View Dynamo table to the Data Lake
      FunctionName: MembershipSub-PromoCode-View-Dynamo-to-Data-Lake-PROD
      Handler: MembershipSub-PromoCode-View-Dynamo-to-Data-Lake.handler
      MemorySize: 128
      Role: !GetAtt [MembershipSubPromotionsDataRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10

  SalesforceLambdaKMSKey:
    Condition: CreateLambdaResources
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub Used by the MembershipSub-Promotions Salesforce Lambda in ${Stage} stage to encrypt and decrypt any environment variables
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Sub MembershipSub-Promotions-Salesforce-Lambda-kms-key-policy-${Stage}
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: "*"
        - Sid: Allow access for Key Administrators
          Effect: Allow
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: "*"
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS: !GetAtt MembershipSubPromotionsDataRole.Arn
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: "*"
  SalesforceLambdaKMSKeyAlias:
    Condition: CreateLambdaResources
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/MembershipSub-Promotions-Salesforce-Lambda-kms-key-${Stage}
      TargetKeyId: !Ref 'SalesforceLambdaKMSKey'

  PromoCodeViewSalesforceLambdaFunctionDEV:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: gu-promotions-tool-dist
        S3Key: membership/PROD/MembershipSub-Promotions-PromoCode-View/MembershipSub-Promotions-PromoCode-View.zip
      Description: A Lambda function to replicate the MembershipSub-PromoCode-View-DEV Dynamo table to Salesforce
      FunctionName: MembershipSub-Promotions-to-Salesforce-DEV
      Handler: MembershipSub-Promotions-to-PromoCode-View-Lambda.handler
      MemorySize: 128
      Role: !GetAtt [MembershipSubPromotionsDataRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10
      KmsKeyArn: !GetAtt SalesforceLambdaKMSKey.Arn
  PromoCodeViewSalesforceLambdaFunctionUAT:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: gu-promotions-tool-dist
        S3Key: membership/PROD/MembershipSub-Promotions-PromoCode-View/MembershipSub-Promotions-PromoCode-View.zip
      Description: A Lambda function to replicate the MembershipSub-PromoCode-View-UAT Dynamo table to Salesforce
      FunctionName: MembershipSub-Promotions-to-Salesforce-UAT
      Handler: MembershipSub-Promotions-to-PromoCode-View-Lambda.handler
      MemorySize: 128
      Role: !GetAtt [MembershipSubPromotionsDataRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10
      KmsKeyArn: !GetAtt SalesforceLambdaKMSKey.Arn
  PromoCodeViewSalesforceLambdaFunctionPROD:
    Condition: CreateLambdaResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: gu-promotions-tool-dist
        S3Key: membership/PROD/MembershipSub-Promotions-PromoCode-View/MembershipSub-Promotions-PromoCode-View.zip
      Description: A Lambda function to replicate the MembershipSub-PromoCode-View-PROD Dynamo table to Salesforce
      FunctionName: MembershipSub-Promotions-to-Salesforce-PROD
      Handler: MembershipSub-PromoCode-View-Dynamo-to-Salesforce.handler
      MemorySize: 128
      Role: !GetAtt [MembershipSubPromotionsDataRole, Arn]
      Runtime: nodejs6.10
      Timeout: 10
      KmsKeyArn: !GetAtt SalesforceLambdaKMSKey.Arn
  ServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::gu-promotions-tool-private/${Stage}/*'
          - Effect: Allow
            Action: s3:GetObject
            Resource: 'arn:aws:s3:::gu-promotions-tool-dist/*'
          - Effect: Allow
            Action: ec2:DescribeTags
            Resource: '*'
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:BatchWriteItem
            - dynamodb:DescribeTable
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
            Resource:
            - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-PROD
            - arn:aws:dynamodb:*:*:table/MembershipSub-Campaigns-PROD
            - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-UAT
            - arn:aws:dynamodb:*:*:table/MembershipSub-Campaigns-UAT
            - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-DEV
            - arn:aws:dynamodb:*:*:table/MembershipSub-Campaigns-DEV
          - Effect: Allow
            Action:
            - cloudwatch:*
            - logs:*
            Resource: '*'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref 'ServerRole'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: !Join ['-', [!Ref 'App', !Ref 'Stage']]
      Scheme: internet-facing
      Listeners:
      - LoadBalancerPort: '443'
        InstancePort: '9000'
        Protocol: HTTPS
        SSLCertificateId: !Ref 'SslArn'
      CrossZone: 'true'
      HealthCheck:
        Target: HTTP:9000/healthcheck
        HealthyThreshold: '2'
        UnhealthyThreshold: '10'
        Interval: '30'
        Timeout: '10'
      Subnets: !Ref 'PublicVpcSubnets'
      SecurityGroups:
      - !Ref 'LoadBalancerSecurityGroup'
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: !Ref 'MinInstances'
      MaxSize: !Ref 'MaxInstances'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 400
      LoadBalancerNames:
      - !Ref 'LoadBalancer'
      Tags:
      - Key: Stage
        Value: !Ref 'Stage'
        PropagateAtLaunch: 'true'
      - Key: Name
        Value: !Join [':', [!Ref 'Stage', !Ref 'App']]
        PropagateAtLaunch: 'true'
      - Key: Stack
        Value: !Ref 'Stack'
        PropagateAtLaunch: 'true'
      - Key: App
        Value: !Ref 'App'
        PropagateAtLaunch: 'true'
      - Key: Role
        Value: !Ref 'App'
        PropagateAtLaunch: 'true'
      VPCZoneIdentifier: !Ref 'PrivateVpcSubnets'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'AmiId'
      SecurityGroups:
      - !Ref 'InstanceSecurityGroup'
      - !Ref 'SshAccessSecurityGroup'
      - !Ref 'VulnerabilityScanningSecurityGroup'
      InstanceType: !Ref 'InstanceType'
      AssociatePublicIpAddress: 'True'
      IamInstanceProfile: !Ref 'InstanceProfile'
      UserData:
        "Fn::Base64":
          !Sub
            - |
              #!/bin/bash -ev
              CONF_DIR=/etc/promotions-tool
              aws s3 cp s3://gu-promotions-tool-dist/${Stack}/${Stage}/${App}/promotions-tool_1.0-SNAPSHOT_all.deb /tmp
              dpkg -i /tmp/promotions-tool_1.0-SNAPSHOT_all.deb
              mkdir -p /etc/gu
              aws s3 cp s3://gu-promotions-tool-private/${Stage}/memsub-promotions-keys.conf /etc/gu
              chown promotions-tool /etc/gu/memsub-promotions-keys.conf
              chmod 0600 /etc/gu/memsub-promotions-keys.conf
              wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py

              sed -i -e "s/__DATE/$(date +%F)/" -e 's/__STAGE/${Stage}/' $CONF_DIR/logger.conf
              python awslogs-agent-setup.py -nr ${AWS::Region} -c $CONF_DIR/logger.conf

              systemctl enable awslogs
              systemctl start awslogs
            - {}

  SshAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Open up SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'InternalCidrIp'
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Open up HTTP  access to load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref 'InternalCidrIp'
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 0.0.0.0/0
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Open up HTTP access to load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
  TopicSendEmail:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SendEmailToReaderRevenueDev
      Subscription:
      - Endpoint: !Ref 'AlarmEmailAddress'
        Protocol: email
  alarmNoHealthyHosts:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: 'true'
      AlarmDescription: There are insufficient healthy hosts
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: '1'
      MetricName: HealthyHostCount
      Namespace: AWS/ELB
      Period: '60'
      Statistic: Average
      Threshold: !Ref 'MinInstances'
      AlarmActions:
      - !Ref 'TopicSendEmail'
      InsufficientDataActions:
      - !Ref 'TopicSendEmail'
      Dimensions:
      - Name: LoadBalancerName
        Value: !Ref 'LoadBalancer'
Outputs:
  LoadBalancer:
    Value: !GetAtt [LoadBalancer, DNSName]
